/*!
 * @file
 * @brief This file includes command's definitions.
 */


DEF_CMD (hit, 0, NO_ARGS,
{
	return 0;
})

DEF_CMD (noc, 1, NO_ARGS, {})

DEF_CMD (jmp, 2, LABEL_ARG,
{
	proc->ip = ADDR;
})

DEF_CMD (je, 3, LABEL_ARG,
{
	if (POP == POP)
		proc->ip = ADDR;
})

DEF_CMD (jne, 4, LABEL_ARG,
{
	if (POP != POP)
		proc->ip = ADDR;
})

DEF_CMD (jb, 5, LABEL_ARG,
{
	if (POP < POP)
		proc->ip = ADDR;

})

DEF_CMD (jnb, 6, LABEL_ARG,
{
	if (POP >= POP)
		proc->ip = ADDR;
})

DEF_CMD (ja, 7, LABEL_ARG,
{
	if (POP > POP)
		proc->ip = ADDR;
})

DEF_CMD (jna, 8, LABEL_ARG,
{
	if (POP <= POP)
		proc->ip = ADDR;
})

DEF_CMD (call, 9, LABEL_ARG,
{
	PUSH_ADDR(proc->ip);
	proc->ip = ADDR;
})

DEF_CMD (ret, 10, NO_ARGS,
{
	proc->ip = POP_ADDR;
})

DEF_CMD (push, 11, MEMORY_ARG,
{
	PUSH(VAL);
})

DEF_CMD (pop, 12, MEMORY_ARG,
{
	*VAL_PTR = POP;
})

DEF_CMD (add, 13, NO_ARGS,
{
	PUSH(POP + POP);
})

DEF_CMD (sub, 14, NO_ARGS,
{
	PUSH(POP - POP);
})

DEF_CMD (mul, 15, NO_ARGS,
{
	PUSH(POP * POP);
})

DEF_CMD (div, 16, NO_ARGS,
{
	int VAL1 = POP;
	int VAL2 = POP;
	if (VAL2 == 0)
		puts("Dividing by zero.");
	else
		PUSH(VAL1 / VAL2);
})

DEF_CMD (sqrt, 17, NO_ARGS,
{
	PUSH((processor_value_t) sqrt(POP));
})

DEF_CMD (in, 20, MEMORY_ARG,
{
	scanf("%d", &VAL);
	*VAL_PTR = VAL;
})

DEF_CMD (out, 21, NO_ARGS,
{
	printf("%d\n", TOP);
})

DEF_CMD (drw, 22, NO_ARGS,
{
	redraw(proc);
})

